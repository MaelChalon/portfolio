// MongoDB Playground
// Use Ctrl+Space inside a snippet or a string literal to trigger completions.

const database = 'MaelChalon';

// The current database to use.
use(database);

db.villes.find({ pop2010: { $gt: 100000 }}).sort({nom: 1}).limit(5);

db.villes.find({ pop2010: { $gt: 100000 }}, {nom: 1, departement: 1, _id: 0}).sort({nom: 1}).limit(5);


db.villes.distinct("departement", 
{altitudeMax: { $gt: 3000 }},
{departement: 1, _id: 0}
);

db.villes.aggregate([
	{$match: {altitudeMax: { $gt: 3000 }}},
	{	$group: {_id: "$departement"}}
]);

db.villes.find(
	{$and: [{pop2010: {$gt: 1000}}, {pop2010: {$lt: 1500}}]},
	{nom: 1, departement: 1, _id: 0, pop2010: 1}
).sort({pop2010: 1});

db.villes.find(
	{pop1999: {$gt: 0}},
	{_id: 0, nom: 1, pop1999: 1}
).sort({pop1999: 1});

db.villes.find(
	{pop1999: {$gt: 5000}, pop2010: {$gt: 5000}, altitudeMax: {$gt: 4000}},
	{_id: 0, nom: 1, departement: 1}
);

db.villes.find(
	{nom: {$regex: '.Bourg.'}},
	{_id: 0, nom: 1, departement: 1}
);

db.villes.find(
	{$and: [{nom: {$regex: /Bourg$/i}}, {nom: {$not: {$regex: /.e.*/i}}}]},
	{_id: 0, nom: 1, departement: 1}
);

db.villes.find(
	{nom: {$regex: /^...$/i}},
	{_id: 0, nom: 1}
);

db.villes.aggregate([
	{/**
	 * Provide any number of field/order pairs.
	 */
	$sort: {
	  nom: 1
	}}
]);

db.villes.aggregate([
	{/**
	 * specifications: The fields to
	 *   include or exclude.
	 */
	$project: {
	  nom: 1, _id: 0, densite: {$divide: ["$pop2010", "$superficie"]}, departement: 1
	}},
	{/**
	 * Provide any number of field/order pairs.
	 */
	$sort: {
	  densite: -1, nom: 1
	}},
	{/**
	 * query: The query in MQL.
	 */
	$match: {
	  departement: 39
	}}
]);

db.villes.aggregate([
	{$group: {_id: "$nom"}},
	{/**
	 * Provide the field name for the count.
	 */
	$count: 'nb de jumeaux'}
]);

db.villes.aggregate([
	{$group: {_id: {superficie: "$superficie", pop2010: "$pop2010"}}},
	{/**
	 * Provide the field name for the count.
	 */
	$count: 'nb de jumeaux'}
]);

db.villes.aggregate([
	{/**
	 * specifications: The fields to
	 *   include or exclude.
	 */
	$project: {
	  _id: 0, nom: 1, pop2010:1 
	}},
	{$sort:{pop2010 : -1}}
]);

db.villes.find(
	{$expr: {$gt: ["$pop2010",{ $multiply: ["$pop1999", 2]}]}}
);

db.villes.aggregate([
	{/**
	 * specifications: The fields to
	 *   include or exclude.
	 */
	$project: {
	  _id: 0, nom: 1, departement: 1, pop1999: 1, pop2010: 1, difference: {$subtract: ["$pop2010", "$pop1999"]}
	}},
	{/**
	 * Provide any number of field/order pairs.
	 */
	$sort: {
	  difference: -1
	}}
]);

// db.villes.updateMany(
// 	{}
// 	{/**
// 	 * Provide the field name to exclude.
// 	 * To exclude multiple fields, pass the field names in an array.
// 	 */
// 	$unset: {'pop2010': ""}}
// );

db.personnes.updateMany(
	{},
	{
		
	}
)